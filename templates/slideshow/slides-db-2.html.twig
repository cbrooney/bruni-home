{% extends 'base.html.twig' %}

{% block title %}
    Slideshow-Fullscreen-DB
{% endblock %}

{% block body %}
    <div class="rahmen" id="show-rahmen-id">
        <div class="filename" id="show-filename-id"><h1> Loading ...  </h1> </div>
        <img class="einzelnesBild" id="show-bild-id" src="">
        <button class="btn btn-primary top-right" onclick="exitFullscreen()">Fullscreen verlassen</button>
    </div>

    {% for divCounter in 0..9 %}
        <div class="rahmen" id="rahmen-id-{{ divCounter }}" hidden="hidden">
            <div class="filename" id="filename-id-{{ divCounter }}"><h1> Nichts  </h1></div>
            <img class="einzelnesBild" id="bild-id-{{ divCounter }}" src="">
        </div>
    {% endfor %}
{% endblock %}

{% block javascripts %}
    <script
            src="https://code.jquery.com/jquery-3.6.0.min.js"
            integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="
            crossorigin="anonymous">
    </script>

    <script type="text/javascript">
        let pictureArray = []

        let bilderAnzahl = 10;

        function setPictureByFullPath(fullpath, filenameHeader, rahmenBild) {
            let dataObject = {
                fullPath: fullpath
            }

            console.log(dataObject)

            $.ajax({
                type: 'POST',
                url: "{{ path('single_picture') }}",
                data: JSON.stringify(dataObject),
                success: function (response) {
                    filenameHeader.innerHTML = '<h1>' + response.filenameFromRequest + '</h1>';
                    $(rahmenBild).attr("src", 'data:image/png;base64,' + response.base64Picture);
                }
            })
        }

        function getPicturesToShow(pictureArray) {
            $.ajax({
                type: 'GET',
                url: "{{ path('figures_to_show') }}",
                success: function (response) {
                    pictureArray = response
                }
            })
        }

        $(document).ready(function() {
            // let bildId = 'bild-id-0';
            // let rahmenBild = document.getElementById(bildId);
            // let filenameHeader = document.getElementById('filename-id-0');

            let showRahmenId = 'show-rahmen-id';
            let showRahmen = document.getElementById(showRahmenId);

            showRahmen.addEventListener('fullscreenchange', fullscreenchanged);

            document.onclick = (event) => {
                let promise = showRahmen.requestFullscreen();
            }

            $.ajax({
                type: 'GET',
                url: "{{ path('figures_to_show') }}",
                async: false,
                success: function (response) {
                    pictureArray = response
                }
            })

            console.log(pictureArray[0].fullPath)

            // set first pic
            // setPictureByFullPath(pictureArray[0].fullPath, filenameHeader, rahmenBild)

            let showFilenameId = 'show-filename-id';
            let showFilename = document.getElementById(showFilenameId);

            // init hidden pics
            for (let i = 0; i < 10; i++) {
                let fullpath = pictureArray[i].fullPath
                console.log(fullpath);

                console.log('Setze Bild in div: ' + i);

                let hiddenBildId = 'bild-id-' + i;
                let hiddenBild = document.getElementById(hiddenBildId);

                let dataObject = {
                    fullPath: fullpath
                }

                $.ajax({
                    type: 'POST',
                    url: "{{ path('single_picture') }}",
                    // async: false,
                    data: JSON.stringify(dataObject),
                    success: function (response) {
                        // filenameHeader.innerHTML = '<h1>' + response.filenameFromRequest + '</h1>';
                        $(hiddenBild).attr("src", 'data:image/png;base64,' + response.base64Picture);
                        if (i === 9) {
                            showFilename.innerHTML = '<h1> Bereit! </h1>';
                        }
                    }
                })
            }

            let showBildId = 'show-bild-id';
            let showBild = document.getElementById(showBildId);

            // pictureArray.forEach((element) => console.log(element.fullPath));
        });

        // let bildId = 'app-bild-id';
        // let rahmenBild = document.getElementById(bildId);
        // let filenameHeader = document.getElementById('filename');
//
        const canWakeLock = () => 'wakeLock' in navigator;
        console.log(canWakeLock());
        let wakelock;

        async function lockWakeState() {
            if(!canWakeLock()) return;
            try {
                wakelock = await navigator.wakeLock.request('screen');
                wakelock.addEventListener('release', () => {
                    console.log('Screen Wake State Locked:', !wakelock.released);
                });
                console.log('Screen Wake State Locked:', !wakelock.released);
            } catch(e) {
                console.error('Failed to lock wake state with reason:', e.message);
            }
        }

        function releaseWakeState() {
            if(wakelock) wakelock.release();
            wakelock = null;
        }

        function delay(milliseconds) {
            return new Promise(resolve => {
                setTimeout(resolve, milliseconds);
            });
        }

        function exitFullscreen() {
            document.exitFullscreen()
                .then(() => console.log("Document Exited from Full screen mode"))
        }

        async function fullscreenchanged(event) {
            if (!document.fullscreenElement) {
                console.log('Leaving fullscreen mode.');
                releaseWakeState();
            }

            // document.fullscreenElement will point to the element that
            // is in fullscreen mode if there is one. If not, the value
            // of the property is null.
            if (document.fullscreenElement) {
                await lockWakeState();
                // console.log(`Element: ${document.fullscreenElement.id} entered fullscreen mode.`);
                let showRahmenId = 'show-rahmen-id';
                let showRahmen = document.getElementById(showRahmenId);

                let showFilenameId = 'show-filename-id';
                let showFilename = document.getElementById(showFilenameId);

                let showBildId = 'show-bild-id';
                let showBild = document.getElementById(showBildId);

                let nextDivNumber = 1;
                let nextFigureToLoadCounter = 11;
                let nextFileIndexToLoad = 10;

                for (let recentDivIndex = 0; recentDivIndex < 11; recentDivIndex++) {
                    if (!document.fullscreenElement) {
                        break;
                    }

                    if (recentDivIndex === 10) {
                        recentDivIndex = 0;
                    }

                    if (nextFileIndexToLoad === pictureArray.length) {
                        nextFileIndexToLoad = 0;
                    }

                    nextDivNumber = recentDivIndex + 1

                    // let recentRahmenId = 'rahmen-id-' + recentFileIndex;
                    // let recentRahmen = document.getElementById(recentRahmenId);
//
                    // let nextRahmenId = 'rahmen-id-' + nextDivNumber;
                    // let nextRahmen = document.getElementById(nextRahmenId);
//
                    console.log('Hole bild von div: ' + recentDivIndex);

                    let recentBildId = 'bild-id-' + recentDivIndex;
                    let recentBild = document.getElementById(recentBildId);
                    // let nextBildSrc = bild.src;

                    console.log('Setze in Rahmen: ' + pictureArray[nextDivNumber].fileName);
                    showBild.src = recentBild.src;

                    console.log('Lade neues Bild in: ' + recentDivIndex + ' - ' + pictureArray[nextFileIndexToLoad].fileName);
//
                    let dataObject = {
                        fullPath: pictureArray[nextFileIndexToLoad].fullPath
                    }

                    $.ajax({
                        type: 'POST',
                        url: "{{ path('single_picture') }}",
                        data: JSON.stringify(dataObject),
                        success: function (response) {
                            // filenameHeader.innerHTML = '<h1>' + response.filenameFromRequest + '</h1>';
                            $(recentBild).attr("src", 'data:image/png;base64,' + response.base64Picture);
                        }
                    })

                    // recentBild.src = nextBildSrc;

                    // nextRahmen.removeAttribute('hidden');
                    // recentRahmen.setAttribute('hidden', 'hidden');

                    await delay(2000);

                    nextFileIndexToLoad = nextFileIndexToLoad + 1;

                    continue

                    let filenameHeader = document.getElementById('filename');
                    filenameHeader.innerHTML = '<h1>' + nextFilename + '</h1>';


                    // add endless loop, restart when reaching end
                    // if (recentFileIndex === 9) {
                    //     recentFileIndex = 0;
                    // }

                    let nextFileIndex = recentDivIndex + 1;

                    // if (nextFileIndex === allFilenames.length) {
                    //     nextFileIndex = 0;
                    // }

                    let nextFilename = allFilenames[nextFileIndex].value;

                    let recentFilename = allFilenames[recentDivIndex].value;
                    console.log('Aktuell: ' + recentFilename);

                    await delay(1000);

                    // counter for already loaded images, this one is going to be shown next
                    if (nextDivNumber > 10) {
                        nextDivNumber = 1;
                    }

                    // figure is loaded in the back
                    if (nextFigureToLoadCounter === allFilenames.length) {
                        nextFigureToLoadCounter = 0;
                    }

                    console.log('Hole bild von div: ' + nextDivNumber);

                    // lade neues Bild in gerade verschobenem div
                    let nextFigureToLoad = allFilenames[nextFigureToLoadCounter].value;
                    console.log('Lade: ' + nextFigureToLoad + ' in div: ' + nextDivNumber);

                    recentBild.src = 'bilder/' + nextFigureToLoad;

                    nextDivNumber = nextDivNumber + 1;
                    nextFigureToLoadCounter = nextFigureToLoadCounter + 1;
                    console.log('');
                }
            }
        }

        async function processFigure(allFilenames, rahmenBild){
            let recentDivNumber = 0;
            let nextFigureToLoadCounter = 0;

            for (let recentFileIndex = 0; recentFileIndex < allFilenames.length + 1; recentFileIndex++) {
                await delay(300);

                // add endless loop, restart when reaching end
                if (recentFileIndex === allFilenames.length) {
                    recentFileIndex = 0;
                }

                let nextDivNumber = recentDivNumber + 1;
                let recentFilename = allFilenames[recentFileIndex].value;

                let nextFilename = allFilenames[nextDivNumber].value;
                console.log(recentFilename);

                // counter for already loaded images, this one is going to be shown now
                if (nextDivNumber === 10) {
                    nextDivNumber = 0;
                }

                // counter for already loaded images, this one is going to be shown now
                if (recentDivNumber === 10) {
                    recentDivNumber = 0;
                }

                // figure is loaded in the back
                if (nextFigureToLoadCounter === (allFilenames.length - 1)) {
                    nextFigureToLoadCounter = 0;
                }

                //
                let nextFigureToLoad = allFilenames[nextFigureToLoadCounter].value;

                recentDivNumber = recentDivNumber + 1;
            }
        }
    </script>
{% endblock %}

{% block stylesheets %}
    <style>
        .rahmen {
            position: relative;
            text-align: center;
            /*color: white;*/
            background-color: navajowhite;
        }

        .einzelnesBild
        {
            /*display:flex;*/
            /*justify-content: center;*/
            /*align-items: center;*/
            /*margin-left: auto;*/
            /*margin-right: auto;*/
            /*margin-top: auto;*/
            /*z-index:0;*/
            /*width: 100%;*/
            /*height: 100vh;*/
            max-width: 100%;
            max-height: 100%;
            height: inherit !important;
            /*display: none;*/
        }
        .einzelnesBild-hidden
        {
            /*display:flex;*/
            /*justify-content: center;*/
            /*align-items: center;*/
            /*margin-left: auto;*/
            /*margin-right: auto;*/
            /*margin-top: auto;*/
            /*z-index:0;*/
            /*width: 100%;*/
            /*height: 100vh;*/
            max-width: 100%;
            max-height: 100%;
            height: inherit !important;
            display: none;
        }
        .filename {
            position: absolute;
            top: 8px;
            left: 16px;
            color: green;
        }
        .top-right {
            position: absolute;
            top: 8px;
            right: 16px;
            font-size: 18px;
        }
    </style>
{% endblock %}
